from datetime import datetime
from src.database.enums import ChangeType
from typing import List, Optional
from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    PositiveInt,
    HttpUrl,
    constr,
    NonNegativeInt,
)


class MarkChange(BaseModel):
    """Represents a change in a mark"""

    lesson_id: constr(min_length=1)
    old_mark: Optional[PositiveInt] = None
    new_mark: Optional[PositiveInt] = None
    change_type: ChangeType
    subject: constr(min_length=1)
    lesson_index: PositiveInt


class SubjectChange(BaseModel):
    """Represents a change in subject name"""

    lesson_id: constr(min_length=1)
    old_subject: constr(min_length=1)
    new_subject: constr(min_length=1)
    lesson_index: PositiveInt


class AnnouncementChange(BaseModel):
    """Represents a change in announcements"""

    announcement_id: constr(min_length=1)
    change_type: ChangeType
    text: Optional[str] = None


class ScheduleChanges(BaseModel):
    """All changes that might need user notification"""

    lessons_order_changed: bool
    marks: List[MarkChange] = []
    subjects: List[SubjectChange] = []
    announcements: List[AnnouncementChange] = []


class Student(BaseModel):
    """Student information model"""

    nickname: constr(min_length=1)
    username: constr(min_length=1)
    password: constr(min_length=1)
    emoji: constr(min_length=1, max_length=2) = "üë§"


class CrawlEvent(BaseModel):
    """Event emitted to trigger schedule crawling"""

    timestamp: datetime
    student: Student


class MarkEvent(BaseModel):
    """Event emitted when a new mark is detected"""

    student_nickname: constr(min_length=1)
    subject: constr(min_length=1)
    new: constr(min_length=1)
    lesson_id: constr(min_length=1)


class AnnouncementEvent(BaseModel):
    """Event emitted when a new announcement is detected"""

    student_nickname: constr(min_length=1)
    text: constr(min_length=1)
    type: constr(min_length=1) = "general"
    behavior_type: Optional[constr(min_length=1)] = None
    description: Optional[constr(min_length=1)] = None
    rating: Optional[constr(min_length=1)] = None
    subject: Optional[constr(min_length=1)] = None


class AttachmentEvent(BaseModel):
    """Event emitted when a new attachment is detected"""

    student_nickname: constr(min_length=1)
    filename: constr(min_length=1)
    url: HttpUrl
    cookies: dict[str, str]
    unique_id: constr(min_length=1)  # Combined ID from schedule_id, subject, lesson_number, day_id


class TelegramMessageEvent(BaseModel):
    """Event emitted when a Telegram message is received"""

    message_id: NonNegativeInt
    chat_id: int
    text: constr(min_length=1)
    date: datetime


class TelegramCommandEvent(BaseModel):
    """Event emitted when a Telegram command is received"""

    command: constr(min_length=1)
    args: List[str] = []
    chat_id: int
    message_id: NonNegativeInt
    date: datetime


# Grade-related constants
GRADE_EMOJIS = {
    1: "üí©",  # Total disaster, comrade
    2: "ü™∞",  # Like annoying fly in soup
    3: "üóëÔ∏è",  # To gulag with this grade
    4: "ü•î",  # Potato - basic survival, comrade!
    5: "‚öíÔ∏è",  # Hammer and sickle - working on it!
    6: "üöú",  # Tractor - making progress like a Kolkhoz!
    7: "üé≠",  # Theater mask - Bolshoi level!
    8: "üöÄ",  # Sputnik - cosmic achievement!
    9: "üêª",  # Russian bear - powerful performance!
    10: "‚≠êÔ∏è",  # Red star - supreme Soviet excellence!
}

GRADE_MESSAGES = {
    1: "–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞, —Ç–æ–≤–∞—Ä–∏—â!",
    2: "–ö–∞–∫ –º—É—Ö–∞ –≤ —Å—É–ø–µ...",
    3: "–ü—Ä—è–º–æ–π –ø—É—Ç—å –≤ –ì–£–õ–ê–ì",
    4: "–û—Ç –∫–∞—Ä—Ç–æ—à–∫–∏ –∫ –∑–≤–µ–∑–¥–∞–º!",
    5: "–¢—Ä—É–¥ –∫—Ä–µ–ø–∫–∏–π!",
    6: "–í–ø–µ—Ä–µ–¥ –∫ –ø–æ–±–µ–¥–µ!",
    7: "–ö—É–ª—å—Ç—É—Ä–Ω–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è!",
    8: "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö!",
    9: "–ú–æ–≥—É—á–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
    10: "–í—ã—Å—à–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∏—â–∞!",
}
