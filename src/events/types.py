from typing import List, Optional
from datetime import datetime
from pydantic import BaseModel, Field, NonNegativeInt


class Student(BaseModel):
    """Student information model"""

    nickname: str = Field(
        ..., description="Unique identifier for the student", examples=["student1"]
    )
    username: str = Field(
        ..., description="Student's school username", examples=["student123"]
    )
    password: str = Field(
        ..., description="Student's school password", examples=["password123"]
    )
    emoji: str = Field(
        default="üë§",
        description="Emoji representing the student",
        examples=["üê±", "üê≠"],
    )


class CrawlEvent(BaseModel):
    """Event emitted to trigger schedule crawling"""

    timestamp: datetime = Field(
        ...,
        description="Time when the crawl event was emitted",
        examples=[datetime.now()],
    )
    student: Student = Field(..., description="Student information for crawling")


class MarkEvent(BaseModel):
    """Event emitted when a new mark is detected"""

    student_nickname: str = Field(
        ..., description="Student's unique identifier", examples=["student1"]
    )
    subject: str = Field(
        ..., description="Subject the mark is for", examples=["Mathematics", "Physics"]
    )
    new: str = Field(..., description="The new mark value", examples=["A", "9", "10"])
    lesson_id: str = Field(
        ..., description="Unique identifier of the lesson", examples=["math_20240315_1"]
    )


class AnnouncementEvent(BaseModel):
    """Event emitted when a new announcement is detected"""

    student_nickname: str = Field(
        ..., description="Student's unique identifier", examples=["student1"]
    )
    text: str = Field(
        ...,
        description="Announcement text content",
        examples=["Class canceled tomorrow"],
    )
    type: str = Field(
        default="general",
        description="Type of announcement",
        examples=["general", "homework", "behavior"],
    )
    behavior_type: Optional[str] = Field(
        None,
        description="Type of behavior (if behavior announcement)",
        examples=["positive", "negative"],
    )
    description: Optional[str] = Field(
        None,
        description="Additional description",
        examples=["Student helped classmates"],
    )
    rating: Optional[str] = Field(
        None,
        description="Behavior rating",
        examples=["excellent", "good", "needs improvement"],
    )
    subject: Optional[str] = Field(
        None, description="Related subject", examples=["Mathematics", "Physics"]
    )


class TelegramMessageEvent(BaseModel):
    """Event emitted when a Telegram message is received"""

    message_id: NonNegativeInt = Field(
        ..., description="Telegram message identifier", examples=[12345]
    )
    chat_id: int = Field(
        ..., description="Telegram chat identifier", examples=[-100123456789]
    )
    text: str = Field(..., description="Message text content", examples=["Hello, bot!"])
    date: datetime = Field(
        ..., description="Message timestamp", examples=[datetime.now()]
    )


class TelegramCommandEvent(BaseModel):
    """Event emitted when a Telegram command is received"""

    command: str = Field(
        ...,
        description="Command name without slash",
        examples=["start", "help", "schedule"],
    )
    args: List[str] = Field(
        default_factory=list,
        description="Command arguments",
        examples=[["today"], ["week", "next"]],
    )
    chat_id: int = Field(
        ..., description="Telegram chat identifier", examples=[-100123456789]
    )
    message_id: NonNegativeInt = Field(
        ..., description="Telegram message identifier", examples=[12345]
    )
    date: datetime = Field(
        ..., description="Command timestamp", examples=[datetime.now()]
    )


# Grade-related constants
GRADE_EMOJIS = {
    1: "üí©",  # Total disaster, comrade
    2: "ü™∞",  # Like annoying fly in soup
    3: "üóëÔ∏è",  # To gulag with this grade
    4: "ü•î",  # Potato - basic survival, comrade!
    5: "‚öíÔ∏è",  # Hammer and sickle - working on it!
    6: "üöú",  # Tractor - making progress like a Kolkhoz!
    7: "üé≠",  # Theater mask - Bolshoi level!
    8: "üöÄ",  # Sputnik - cosmic achievement!
    9: "üêª",  # Russian bear - powerful performance!
    10: "‚≠êÔ∏è",  # Red star - supreme Soviet excellence!
}

GRADE_MESSAGES = {
    1: "–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞, —Ç–æ–≤–∞—Ä–∏—â!",
    2: "–ö–∞–∫ –º—É—Ö–∞ –≤ —Å—É–ø–µ...",
    3: "–ü—Ä—è–º–æ–π –ø—É—Ç—å –≤ –ì–£–õ–ê–ì",
    4: "–û—Ç –∫–∞—Ä—Ç–æ—à–∫–∏ –∫ –∑–≤–µ–∑–¥–∞–º!",
    5: "–¢—Ä—É–¥ –∫—Ä–µ–ø–∫–∏–π!",
    6: "–í–ø–µ—Ä–µ–¥ –∫ –ø–æ–±–µ–¥–µ!",
    7: "–ö—É–ª—å—Ç—É—Ä–Ω–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è!",
    8: "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö!",
    9: "–ú–æ–≥—É—á–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
    10: "–í—ã—Å—à–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∏—â–∞!",
}
